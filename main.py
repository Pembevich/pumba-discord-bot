import discord
from discord.ext import commands
import aiosqlite
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    async with aiosqlite.connect("data.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                name TEXT,
                info TEXT
            )
        """)
        await db.commit()

@bot.command()
async def add(ctx, user: discord.Member, *, info):
    async with aiosqlite.connect("data.db") as db:
        await db.execute("INSERT OR REPLACE INTO users (id, name, info) VALUES (?, ?, ?)",
                         (user.id, user.name, info))
        await db.commit()
    await ctx.send(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@bot.command()
async def info(ctx, user: discord.Member):
    async with aiosqlite.connect("data.db") as db:
        async with db.execute("SELECT info FROM users WHERE id = ?", (user.id,)) as cursor:
            row = await cursor.fetchone()
    if row:
        await ctx.send(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user.name}: {row[0]}")
    else:
        await ctx.send("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

@bot.command()
async def message(ctx, user: discord.Member, *, text):
    try:
        await user.send(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {ctx.author.name}: {text}")
        await ctx.send("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except discord.Forbidden:
        await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª –õ–°.")

import discord
from discord.ext import commands
import sqlite3  # <-- –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ
intents = discord.Intents.default()
intents.message_content = True  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è

bot = commands.Bot(command_prefix='!', intents=intents)
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect('database.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS information (
    title TEXT PRIMARY KEY,
    content TEXT
)''')
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@bot.command()
async def add(ctx, title: str, *, content: str):
    try:
        c.execute("INSERT OR REPLACE INTO information (title, content) VALUES (?, ?)", (title.lower(), content))
        conn.commit()
        await ctx.send(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º `{title}` –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@bot.command()
async def info(ctx, title: str):
    c.execute("SELECT content FROM information WHERE title = ?", (title.lower(),))
    result = c.fetchone()
    if result:
        await ctx.send(f"üìå **{title}**:\n{result[0]}")
    else:
        await ctx.send("‚ùó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
bot.run(TOKEN)
